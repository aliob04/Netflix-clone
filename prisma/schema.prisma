generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?
  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  accessLevel   Boolean   @default(false)
  email         String?   @unique
  emailVerified DateTime?
  hashedPassword String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  passenger     Passenger?
  staff         Staff?
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Passenger {
  id           String       @id @default(cuid())
  userId       String       @unique
  user         User         @relation(fields: [userId], references: [id])
  reservations Reservation[]
  dependents   Dependent[]
}

model Staff {
  id     String   @id @default(cuid())
  userId String   @unique
  user   User     @relation(fields: [userId], references: [id])
  role   String   // 'Reservation Manager' or 'Train Operator'
}

model Train {
  id           String     @id @default(cuid())
  nameArabic   String     @unique
  nameEnglish  String     @unique
  fromStationId String
  toStationId   String
  schedules    Schedule[]
  reservations Reservation[]
  fromStation   Station     @relation("FromStation", fields: [fromStationId], references: [id])
  toStation     Station     @relation("ToStation", fields: [toStationId], references: [id])
}

model Station {
  id               String         @id @default(cuid())
  name             String         @unique
  schedules        Schedule[]
  fromReservations Reservation[] @relation("FromStation")
  toReservations   Reservation[] @relation("ToStation")
  fromStation Train[] @relation("FromStation")
  toStation   Train[] @relation("ToStation")
}

model Schedule {
  id         String   @id @default(cuid())
  trainId    String
  stationId  String
  sequence   Int
  train      Train    @relation(fields: [trainId], references: [id])
  station    Station  @relation(fields: [stationId], references: [id])
  @@unique([trainId, sequence])
}

model Reservation {
  id            String      @id @default(cuid())
  trainId       String
  passengerId   String
  fromStationId String
  toStationId   String
  status        String
  coachType     String
  departureTime DateTime
  arrivalTime   DateTime
  train         Train       @relation(fields: [trainId], references: [id])
  passenger     Passenger   @relation(fields: [passengerId], references: [id])
  fromStation   Station     @relation("FromStation", fields: [fromStationId], references: [id])
  toStation     Station     @relation("ToStation", fields: [toStationId], references: [id])

  payments      Payment[]
  waitingLists  WaitingList[]
}


model Dependent {
  id          String     @id @default(cuid())
  passengerId String
  passenger   Passenger  @relation(fields: [passengerId], references: [id])
}

model Payment {
  id              String       @id @default(cuid())
  reservationId   String
  status          String       // 'Paid', 'Unpaid', 'Refunded'
  vat             Float        @default(0.15)
  reservation     Reservation  @relation(fields: [reservationId], references: [id])
}

model WaitingList {
  id              String        @id @default(cuid())
  reservationId   String
  paymentStatus   String       // 'Paid' or 'Unpaid'
  expirationDate  DateTime
  reservation     Reservation   @relation(fields: [reservationId], references: [id])
}
